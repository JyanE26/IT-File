package com.mycompany.mergesortexample;

import java.util.Arrays;

public class MergeSortExample {

    public static void main(String[] args) {
        // Sample array to sort
        int[] numbers = {38, 27, 43, 3, 9, 82, 10};
        
        System.out.println("Original Array: " + Arrays.toString(numbers));

        // Call the mergeSort function to sort the array
        mergeSort(numbers, 0, numbers.length - 1);

        System.out.println("Sorted Array: " + Arrays.toString(numbers));
    }

    // Merge Sort function
    public static void mergeSort(int[] array, int left, int right) {
        if (left < right) {
            int middle = (left + right) / 2;

            // Repeatedly sort the left and right halves
            mergeSort(array, left, middle);
            mergeSort(array, middle + 1, right);

            // Merge the sorted halves
            merge(array, left, middle, right);
        }
    }

    public static void merge(int[] array, int left, int middle, int right) {

        int n1 = middle - left + 1;
        int n2 = right - middle;


        int[] leftArray = new int[n1];
        int[] rightArray = new int[n2];

        // Copy data into temporary arrays
        for (int i = 0; i < n1; i++) {
            leftArray[i] = array[left + i];
        }
        for (int j = 0; j < n2; j++) {
            rightArray[j] = array[middle + 1 + j];
        }

        // Initial indexes of the left and right arrays
        int i = 0, j = 0;

        // Initial index for merged array
        int k = left;

        // Merge the temporary arrays back into the original array
        while (i < n1 && j < n2) {
            if (leftArray[i] <= rightArray[j]) {
                array[k] = leftArray[i];
                i++;
            } else {
                array[k] = rightArray[j];
                j++;
            }
            k++;
        }

        while (i < n1) {
            array[k] = leftArray[i];
            i++;
            k++;
        }

        while (j < n2) {
            array[k] = rightArray[j];
            j++;
            k++;
        }
    }
} 
